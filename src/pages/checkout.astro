---
import Layout from "../layouts/layout.astro";
import Button from "../components/button.astro";
import Input from "../components/input.astro";

import "../styles/checkout.css";
import "../styles/cartCard.css";
import "../styles/button.css";
---

<Layout>
  <div class="container">
    <div id="emptyCart" class="emptycartCard">
      <img src="/cart.svg" class="illust" alt="IllustCart" />
      <h2>Keranjangmu masih kosong nih</h2>
      <div class="description">
        Yuk, pilih dulu kue favoritmu biar harimu makin manis!
      </div>
      <Button href="/">Lihat menu</Button>
    </div>
    <div id="cartItems" class="cartItems" style="display: none;">
      <!-- Cart items will be rendered here -->
    </div>

    <div id="formCustomer" class="formCustomer">
      <div class="containerForm">
        <Input
          label="Nama lengkap"
          instruction="Pakai nama lengkap ya, biar mudah pas kirim."
          placeholder="Ketik nama lengkap"
          id="namalengkap"
          type="text"
        />

        <Input
          label="Nomor Whatsapp"
          instruction="Pastikan nomor bisa dihubungi ya."
          placeholder="08..."
          id="nomorwa"
          type="tel"
        />

        <Input
          label="Alamat lengkap"
          instruction="Tulis selengkap mungkin biar nggak nyasar pas kirim."
          placeholder="Ketik alamat lengkap"
          id="alamatlengkap"
          type="text"
        />

        <div class="customOptions">
          <div class="header">
            <div class="optionLabel">Metode bayar</div>
            <div class="optionInstruction">
              Pilih cara yang paling nyaman buat kamu ya.
            </div>
          </div>

          <!-- Payment Methods Section -->
          <div class="paymentGroup">
            <div class="paymentGroupHeader">Pembayaran Online (VA)</div>
            <div class="options">
              <label class="option">
                <input type="radio" name="payment" value="MANDIRIVA" checked />
                <div class="optionContent">
                  <div class="optionTitle">Transfer VA Mandiri</div>
                  <div class="optionDesc">
                    Transfer pake VA Mandiri. Khusus untuk rekening Mandiri aja
                    ya.
                  </div>
                </div>
              </label>

              <label class="option">
                <input type="radio" name="payment" value="BNIVA" />
                <div class="optionContent">
                  <div class="optionTitle">Transfer VA BNI</div>
                  <div class="optionDesc">
                    Transfer pake VA BNI. Khusus untuk rekening BNI aja ya.
                  </div>
                </div>
              </label>

              <label class="option">
                <input type="radio" name="payment" value="BCAVA" />
                <div class="optionContent">
                  <div class="optionTitle">Transfer VA BCA</div>
                  <div class="optionDesc">
                    Transfer pake VA BCA. Khusus untuk rekening BCA aja ya.
                  </div>
                </div>
              </label>

              <label class="option">
                <input type="radio" name="payment" value="BRIVA" />
                <div class="optionContent">
                  <div class="optionTitle">Transfer VA BRI</div>
                  <div class="optionDesc">
                    Transfer pake VA BRI. Khusus untuk rekening BRI aja ya.
                  </div>
                </div>
              </label>

              <label class="option">
                <input type="radio" name="payment" value="BSIVA" />
                <div class="optionContent">
                  <div class="optionTitle">Transfer VA BSI</div>
                  <div class="optionDesc">
                    Transfer pake VA BSI. Khusus untuk rekening BSI aja ya.
                  </div>
                </div>
              </label>
              <!-- Add more payment options here -->
            </div>
          </div>

          <div class="paymentGroup">
            <div class="paymentGroupHeader">Pembayaran Tunai</div>
            <div class="options">
              <label class="option">
                <input type="radio" name="payment" value="cash" />
                <div class="optionContent">
                  <div class="optionTitle">Bayar tunai</div>
                  <div class="optionDesc">
                    Bayar tunai langsung saat kue sampai, di toko atau alamat
                    kamu.
                  </div>
                </div>
              </label>
              <!-- Add more payment options here -->
            </div>
          </div>
        </div>

        <div class="customOptions">
          <div class="header">
            <div class="optionLabel">Metode kirim</div>
            <div class="optionInstruction">
              Pilih cara yang paling nyaman buat kamu ya.
            </div>
          </div>
          <div class="options">
            <label class="option">
              <input type="radio" name="delivery" value="delivery" checked />
              <div class="optionContent">
                <div class="optionTitle">Diantar</div>
                <div class="optionDesc">
                  Akan diantar langsung ke alamat kamu.
                </div>
              </div>
            </label>

            <label class="option">
              <input type="radio" name="delivery" value="takeaway" />
              <div class="optionContent">
                <div class="optionTitle">Ambil sendiri</div>
                <div class="optionDesc">Kue bisa diambil langsung di toko.</div>
              </div>
            </label>
          </div>
        </div>
      </div>
    </div>

    <div class="summaryCart">
      <Input
        label="Kode promo"
        instruction="Kalo punya kode promo, bisa diisi ya."
        placeholder="Ketik kode promo"
        id="kodepromo"
        type="text"
      />
      <div class="subtotalContainer">
        <div class="subtotal">
          <div class="label">Subtotal</div>
          <div class="value" id="subtotalValue">Rp60.000</div>
        </div>
        <div class="deliveryFee">
          <div class="label">Ongkir</div>
          <div class="value" id="deliveryValue">Rp10.000</div>
        </div>
        <div class="adminFee">
          <div class="label">Admin</div>
          <div class="value" id="adminFeeValue">Rp2.500</div>
        </div>
        <div class="noteFee">
          Karena belanja kamu banyak, ongkirnya jadi cuma Rp5.000 aja ðŸŽ‰
        </div>
      </div>
      <div class="totalContainer">
        <div class="label">Total</div>
        <div class="valueBig" id="totalValue">Rp70.000</div>
      </div>
      <Button style="block" id="checkoutButton">Lanjutkan</Button>
    </div>
  </div>
</Layout>

<script type="module">
  // ------------------------- UTIL -------------------------
  const MAX_QTY = 20;
  const promoCodes = {
    CHC5Z8K2: 5000,
    CHE5XN1L: 5000,
    CAKE5TQ29: 5000,
    ONG5WK3X: 5000,
    CHC10R7LQ: 10000,
    CHE10VP82: 10000,
    CAKE10KS5Z: 10000,
    ONG10JR4C: 10000,
  };

  function formatRupiah(amount) {
    return `Rp${amount.toLocaleString("id-ID")}`;
  }

  // ------------------------- CART MANAGER -------------------------
  class CartManager {
    static KEY = "cart";

    static get() {
      try {
        return JSON.parse(localStorage.getItem(this.KEY) || "[]");
      } catch {
        localStorage.removeItem(this.KEY);
        return [];
      }
    }

    static save(cart) {
      localStorage.setItem(this.KEY, JSON.stringify(cart));
      window.dispatchEvent(new CustomEvent("cartUpdated", { detail: cart }));
    }

    static inc(id) {
      const cart = this.get();
      const p = cart.find((x) => x.id === id);
      if (p && p.quantity < MAX_QTY) {
        p.quantity++;
        this.save(cart);
      }
    }

    static dec(id) {
      const cart = this.get();
      const idx = cart.findIndex((x) => x.id === id);
      if (idx > -1) {
        if (cart[idx].quantity > 1) cart[idx].quantity--;
        else cart.splice(idx, 1);
        this.save(cart);
      }
    }

    static del(id) {
      const filtered = this.get().filter((x) => x.id !== id);
      this.save(filtered);
    }
  }

  // ------------------------- CHECKOUT CONTROLLER -------------------------
  class CheckoutController {
    static init() {
      this.el = {
        cartContainer: document.getElementById("cartItems"),
        emptyState: document.getElementById("emptyCart"),
        formCustomer: document.getElementById("formCustomer"),
        summary: document.querySelector(".summaryCart"),
        subtotalVal: document.getElementById("subtotalValue"),
        deliveryVal: document.getElementById("deliveryValue"),
        totalVal: document.getElementById("totalValue"),
        promoInput: document.getElementById("kodepromo"),
        deliveryRadios: Array.from(
          document.querySelectorAll('input[name="delivery"]')
        ),
        addressInput: document.getElementById("alamatlengkap"),
        checkoutBtn: document.getElementById("checkoutButton"),
        noteFee: document.querySelector(".noteFee"),
        paymentRadios: Array.from(
          document.querySelectorAll('input[name="payment"]')
        ),
      };

      window.addEventListener("cartUpdated", () => {
        this.render();
        this.updateTotals();
      });
      document.addEventListener("DOMContentLoaded", () => {
        this.render();
        this.updateTotals();
        this.updatePaymentNote();
      });
      this.el.promoInput.addEventListener("input", () => this.updateTotals());
      this.el.deliveryRadios.forEach((r) =>
        r.addEventListener("change", () => {
          this.onDeliveryChange();
          this.updateTotals();
        })
      );
      this.el.paymentRadios.forEach((r) =>
        r.addEventListener("change", () => {
          this.updatePaymentNote();
          this.updateTotals();
        })
      );
      this.el.checkoutBtn?.addEventListener("click", (e) => {
        e.preventDefault();
        this.handleCheckout();
      });
    }

    static render() {
      const cart = CartManager.get();
      const isEmpty = cart.length === 0;
      this.el.emptyState.style.display = isEmpty ? "flex" : "none";
      this.el.cartContainer.style.display = isEmpty ? "none" : "flex";
      this.el.formCustomer?.style.setProperty(
        "display",
        isEmpty ? "none" : "flex"
      );
      this.el.summary?.style.setProperty("display", isEmpty ? "none" : "flex");
      if (isEmpty) return;

      this.el.cartContainer.innerHTML = "";
      cart.forEach((p) => {
        const card = document.createElement("div");
        card.className = "cardCart";
        card.id = p.id;
        card.innerHTML = `
          <div class="thumbnail" style="background-image:url('${p.image}')">
            <div class="price">${formatRupiah(Number(p.price))}</div>
          </div>
          <div class="content">
            <div class="data">
              <div class="title">${p.name}<span class="qty">x${p.quantity}</span></div>
            </div>
            <div class="action"><div class="spacer"></div></div>
          </div>
        `;
        const action = card.querySelector(".action");
        action.insertBefore(
          this.makeBtn("Kurangi", () => CartManager.dec(p.id)),
          action.firstChild
        );
        action.insertBefore(
          this.makeBtn(
            "Tambahin",
            () => CartManager.inc(p.id),
            p.quantity >= MAX_QTY
          ),
          action.firstChild
        );
        action.appendChild(this.makeBtn("Hapus", () => CartManager.del(p.id)));
        this.el.cartContainer.appendChild(card);
      });
    }

    static makeBtn(label, onClick, disabled = false) {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.className = `button link${disabled ? " disabled" : ""}`;
      btn.textContent = label;
      btn.disabled = disabled;
      btn.addEventListener("click", onClick);
      return btn;
    }

    static updatePaymentNote() {
      const paymentMethod = document.querySelector(
        'input[name="payment"]:checked'
      )?.value;

      if (paymentMethod === "transfer") {
      } else {
      }
    }

    static calculate() {
      const cart = CartManager.get();
      const subtotal = cart.reduce(
        (s, p) => s + Number(p.price) * p.quantity,
        0
      );
      const method = document.querySelector(
        'input[name="delivery"]:checked'
      )?.value;
      let fee = 0;

      // Biaya admin berdasarkan metode pembayaran
      const paymentMethod = document.querySelector(
        'input[name="payment"]:checked'
      )?.value;
      let adminFee = 0;

      // Set biaya admin berdasarkan jenis VA
      if (paymentMethod === "MANDIRIVA") adminFee = 2125;
      else if (paymentMethod === "BNIVA") adminFee = 2125;
      else if (paymentMethod === "BCAVA") adminFee = 2750;
      else if (paymentMethod === "BRIVA") adminFee = 2125;
      else if (paymentMethod === "BSIVA") adminFee = 2125;

      if (method === "delivery") {
        fee = subtotal >= 60000 ? 5000 : 10000;
        const code = this.el.promoInput.value.toUpperCase();
        if (code in promoCodes) fee = Math.max(0, fee - promoCodes[code]);
        this.el.noteFee.style.display = subtotal >= 60000 ? "block" : "none";
      } else {
        fee = 0;
        this.el.noteFee.style.display = "none";
      }
      return {
        subtotal,
        fee,
        adminFee,
        total: subtotal + fee + adminFee,
        method,
        paymentMethod,
      };
    }

    static updateTotals() {
      const { subtotal, fee, adminFee, total, method, paymentMethod } =
        this.calculate();
      this.el.subtotalVal.textContent = formatRupiah(subtotal);
      this.el.deliveryVal.textContent =
        method === "takeaway" ? "Gratis" : formatRupiah(fee);

      const adminFeeElement = document.getElementById("adminFeeValue");
      if (adminFeeElement) {
        if (adminFee > 0) {
          adminFeeElement.textContent = formatRupiah(adminFee);
          adminFeeElement.parentElement.style.display = "flex";
        } else {
          adminFeeElement.parentElement.style.display = "none";
        }
      }

      this.el.totalVal.textContent = formatRupiah(total);
    }

    static onDeliveryChange() {
      const method = document.querySelector(
        'input[name="delivery"]:checked'
      )?.value;
      if (method === "takeaway") {
        this.el.addressInput.value = "Ambil di toko";
        this.el.addressInput.disabled = true;
        const err =
          this.el.addressInput.parentElement.querySelector(".errorText");
        if (err) err.style.display = "none";
      } else {
        this.el.addressInput.value = "";
        this.el.addressInput.disabled = false;
      }
    }

    static validate() {
      let ok = true;
      let firstField = null;

      const nameInp = document.getElementById("namalengkap");
      const nameErr = nameInp.parentElement.querySelector(".errorText");
      if (nameInp.value.trim().length < 3) {
        nameErr.textContent = "Nama lengkap minimal 3 karakter";
        nameErr.style.display = "block";
        ok = false;
        firstField = firstField || nameInp;
      } else {
        nameErr.style.display = "none";
      }

      const phoneInp = document.getElementById("nomorwa");
      const phoneErr = phoneInp.parentElement.querySelector(".errorText");
      const digits = phoneInp.value.replace(/\D/g, "");

      if (
        digits.length < 10 ||
        !(digits.startsWith("62") || digits.startsWith("08"))
      ) {
        phoneErr.textContent =
          "Nomor WA harus diawali 62/08 dan minimal 10 digit";
        phoneErr.style.display = "block";
        ok = false;
        firstField = firstField || phoneInp;
      } else {
        phoneErr.style.display = "none";
      }

      const delivery = document.querySelector(
        'input[name="delivery"]:checked'
      )?.value;
      if (delivery === "delivery") {
        const addrInp = this.el.addressInput;
        const addrErr = addrInp.parentElement.querySelector(".errorText");
        if (addrInp.value.trim().length < 10) {
          addrErr.textContent = "Alamat harus lengkap minimal 10 karakter";
          addrErr.style.display = "block";
          ok = false;
          firstField = firstField || addrInp;
        } else {
          addrErr.style.display = "none";
        }
      }

      if (CartManager.get().length === 0) {
        alert("Keranjang masih kosong!");
        ok = false;
      }

      if (!ok && firstField) {
        firstField.scrollIntoView({ behavior: "smooth", block: "center" });
        firstField.focus();
      }

      return ok;
    }

    static saveCustomer() {
      const name = window.getInputValue("namalengkap");
      const phone = window.getInputValue("nomorwa");
      const address = window.getInputValue("alamatlengkap");
      const pm =
        document.querySelector('input[name="payment"]:checked')?.value ||
        "transfer";
      const dm =
        document.querySelector('input[name="delivery"]:checked')?.value ||
        "delivery";
      const { subtotal, fee, adminFee, total } = this.calculate();
      const ts = new Date().toISOString();
      const orderId = `${name.replace(/\s+/g, "").toUpperCase()}${Date.now()}`;

      const cartItems = CartManager.get();

      const data = {
        name,
        phone,
        address,
        paymentMethod: pm,
        deliveryMethod: dm,
        timestamp: ts,
        orderId,
        subtotal,
        deliveryFee: fee,
        adminFee: adminFee,
        total,
        cartItems: cartItems,
      };
      localStorage.setItem("customerData", JSON.stringify(data));
      return data;
    }

    static async handleCheckout() {
      if (!this.validate()) return;
      
      // Tambahkan indikator loading pada tombol
      const checkoutBtn = this.el.checkoutBtn;
      const originalText = checkoutBtn.textContent;
      checkoutBtn.textContent = "Loading...";
      checkoutBtn.disabled = true;
    
      const cust = this.saveCustomer();
      const paymentMethod = cust.paymentMethod;
    
      if (paymentMethod === "cash") {
        window.location.href = "/payment/cod";
        return;
      }
    
      const transferMethods = ["MANDIRIVA", "BNIVA", "BCAVA", "BRIVA", "BSIVA"];
      if (transferMethods.includes(paymentMethod)) {
        try {
          // Hitung total dari cartItems untuk memastikan konsistensi
          const itemsTotal = cust.cartItems.reduce((sum, item) => {
            return sum + Number(item.price) * item.quantity;
          }, 0);
    
          // Format order_items sesuai dengan yang diharapkan API
          const order_items = cust.cartItems.map((item) => ({
            sku: item.id,
            name: item.name,
            price: Number(item.price),
            quantity: item.quantity,
            subtotal: Number(item.price) * item.quantity,
          }));
    
          // Tambahkan ongkir sebagai item jika ada
          if (cust.deliveryFee > 0) {
            order_items.push({
              sku: "SHIPPING",
              name: "Biaya Pengiriman",
              price: cust.deliveryFee,
              quantity: 1,
              subtotal: cust.deliveryFee
            });
          }
    
          // Tambahkan biaya admin sebagai item jika ada
          if (cust.adminFee > 0) {
            order_items.push({
              sku: "ADMINFEE",
              name: `Biaya Admin ${paymentMethod}`,
              price: cust.adminFee,
              quantity: 1,
              subtotal: cust.adminFee
            });
          }
    
          // Verifikasi total
          const orderItemsTotal = order_items.reduce((sum, item) => sum + item.subtotal, 0);
          console.log("Total dari order_items (dengan biaya tambahan):", orderItemsTotal);
          console.log("Total dari cust.total:", cust.total);
    
          // Pastikan total sama persis
          if (orderItemsTotal !== cust.total) {
            console.error("Total tidak sama! Perbedaan:", cust.total - orderItemsTotal);
          }
    
          // Hapus biaya admin dari order_items karena Tripay akan menambahkannya otomatis
          const filteredOrderItems = order_items.filter(item => item.sku !== "ADMINFEE");
          const amountWithoutAdminFee = cust.total - cust.adminFee;
    
          const requestBody = {
            amount: amountWithoutAdminFee, // Kirim amount tanpa biaya admin
            merchant_ref: cust.orderId,
            order_items: filteredOrderItems, // Gunakan order_items tanpa item biaya admin
            customer_name: cust.name,
            customer_phone: cust.phone,
            customer_email: "customer@chechecakes.store",
            payment_method: paymentMethod,
            subtotal: cust.subtotal,
            shipping_fee: cust.deliveryFee,
            admin_fee: cust.adminFee, // Tetap kirim informasi admin_fee untuk referensi
          };
    
          console.log("Request body:", requestBody);
    
          const response = await fetch("/api/payment", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(requestBody),
          });
    
          const result = await response.json();
          console.log("API response:", result);
    
          if (result.success == true) {
            console.log("Payment signature:", result.signature);
            localStorage.setItem(
              "paymentData",
              JSON.stringify(result.payment_data)
            );
            window.location.href = "/payment/va";
          } else {
            console.error("Payment processing failed:", result);
            // Kembalikan tombol ke keadaan semula jika gagal
            checkoutBtn.textContent = originalText;
            checkoutBtn.disabled = false;
            alert(
              "Gagal memproses pembayaran: " +
                (result.message || "Silakan coba lagi.")
            );
          }
        } catch (error) {
          console.error("Payment error:", error);
          // Kembalikan tombol ke keadaan semula jika terjadi error
          checkoutBtn.textContent = originalText;
          checkoutBtn.disabled = false;
          alert("Gagal memproses pembayaran. Silakan coba lagi.");
        }
        return;
      }
    
      // Kembalikan tombol ke keadaan semula jika metode pembayaran tidak tersedia
      checkoutBtn.textContent = originalText;
      checkoutBtn.disabled = false;
      alert("Metode pembayaran belum tersedia. Silakan pilih bayar tunai.");
    }
  }

  CheckoutController.init();
</script>

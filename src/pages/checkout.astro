---
import Layout from "../layouts/layout.astro";
import Button from "../components/button.astro";
import Input from "../components/input.astro";

import "../styles/checkout.css";
import "../styles/cartCard.css";
import "../styles/button.css";

const FLIP_API_KEY = import.meta.env.PUBLIC_FLIP_API_KEY;
---

<Layout>
  <div class="container">
    <div id="emptyCart" class="emptycartCard">
      <img src="/cart.svg" class="illust" alt="IllustCart" />
      <h2>Keranjangmu masih kosong nih</h2>
      <div class="description">
        Yuk, pilih dulu kue favoritmu biar harimu makin manis!
      </div>
      <Button href="/">Lihat menu</Button>
    </div>
    <div id="cartItems" class="cartItems" style="display: none;">
      <!-- Cart items will be rendered here -->
    </div>

    <div id="formCustomer" class="formCustomer">
      <div class="containerForm">
        <Input
          label="Nama lengkap"
          instruction="Pakai nama lengkap ya, biar mudah pas kirim."
          placeholder="Ketik nama lengkap"
          id="namalengkap"
          type="text"
        />

        <Input
          label="Nomor Whatsapp"
          instruction="Pastikan nomor bisa dihubungi ya."
          placeholder="08..."
          id="nomorwa"
          type="tel"
        />

        <Input
          label="Alamat lengkap"
          instruction="Tulis selengkap mungkin biar nggak nyasar pas kirim."
          placeholder="Ketik alamat lengkap"
          id="alamatlengkap"
          type="text"
        />

        <div class="customOptions">
          <div class="header">
            <div class="optionLabel">Metode bayar</div>
            <div class="optionInstruction">
              Pilih cara yang paling nyaman buat kamu ya.
            </div>
          </div>
          <div class="options">
            <label class="option">
              <input type="radio" name="payment" value="transfer" checked />
              <div class="optionContent">
                <div class="optionTitle">Transfer via Flip<div>
                <div class="optionDesc">
                  Bayar lewat Flip gampang, aman dan cepat!
                </div>
              </div>
            </label>

            <label class="option">
              <input type="radio" name="payment" value="cash" />
              <div class="optionContent">
                <div class="optionTitle">Bayar tunai</div>
                <div class="optionDesc">
                  Bayar tunai langsung saat kue sampai, di toko atau alamat
                  kamu.
                </div>
              </div>
            </label>
          </div>
          <!-- <div class="noteFlip">
            Transfer via Flip-nya lagi off sementara, tapi kamu tetap bisa minta
            link bayar ke admin kok~
          </div> -->
        </div>

        <div class="customOptions">
          <div class="header">
            <div class="optionLabel">Metode kirim</div>
            <div class="optionInstruction">
              Pilih cara yang paling nyaman buat kamu ya.
            </div>
          </div>
          <div class="options">
            <label class="option">
              <input type="radio" name="delivery" value="delivery" checked />
              <div class="optionContent">
                <div class="optionTitle">Diantar</div>
                <div class="optionDesc">
                  Akan diantar langsung ke alamat kamu.
                </div>
              </div>
            </label>

            <label class="option">
              <input type="radio" name="delivery" value="takeaway" />
              <div class="optionContent">
                <div class="optionTitle">Ambil sendiri</div>
                <div class="optionDesc">Kue bisa diambil langsung di toko.</div>
              </div>
            </label>
          </div>
        </div>
      </div>
    </div>

    <div class="summaryCart">
      <Input
        label="Kode promo"
        instruction="Kalo punya kode promo, bisa diisi ya."
        placeholder="Ketik kode promo"
        id="kodepromo"
        type="text"
      />
      <div class="subtotalContainer">
        <div class="subtotal">
          <div class="label">Subtotal</div>
          <div class="value" id="subtotalValue">Rp60.000</div>
        </div>
        <div class="deliveryFee">
          <div class="label">Ongkir</div>
          <div class="value" id="deliveryValue">Rp10.000</div>
        </div>
        <div class="noteFee">
          Karena belanja kamu banyak, ongkirnya jadi cuma Rp5.000 aja ðŸŽ‰
        </div>
      </div>
      <div class="totalContainer">
        <div class="label">Total</div>
        <div class="valueBig" id="totalValue">Rp70.000</div>
      </div>
      <div class="noteFlip" id="noteTotal">
        Totalnya masih belum termasuk biaya admin dari metode bayarnya ya
      </div>
      <Button style="block" id="checkoutButton">Lanjutkan</Button>
    </div>
  </div>
</Layout>

<script type="module" define:vars={{ FLIP_API_KEY }}>
  // ------------------------- UTIL -------------------------
  const MAX_QTY = 20;
  const promoCodes = {
    CHC5Z8K2: 5000,
    CHE5XN1L: 5000,
    CAKE5TQ29: 5000,
    ONG5WK3X: 5000,
    CHC10R7LQ: 10000,
    CHE10VP82: 10000,
    CAKE10KS5Z: 10000,
    ONG10JR4C: 10000,
  };

  function formatRupiah(amount) {
    return `Rp${amount.toLocaleString("id-ID")}`;
  }

  // ------------------------- CART MANAGER -------------------------
  class CartManager {
    static KEY = "cart";

    static get() {
      try {
        return JSON.parse(localStorage.getItem(this.KEY) || "[]");
      } catch {
        localStorage.removeItem(this.KEY);
        return [];
      }
    }

    static save(cart) {
      localStorage.setItem(this.KEY, JSON.stringify(cart));
      window.dispatchEvent(new CustomEvent("cartUpdated", { detail: cart }));
    }

    static inc(id) {
      const cart = this.get();
      const p = cart.find((x) => x.id === id);
      if (p && p.quantity < MAX_QTY) {
        p.quantity++;
        this.save(cart);
      }
    }

    static dec(id) {
      const cart = this.get();
      const idx = cart.findIndex((x) => x.id === id);
      if (idx > -1) {
        if (cart[idx].quantity > 1) cart[idx].quantity--;
        else cart.splice(idx, 1);
        this.save(cart);
      }
    }

    static del(id) {
      const filtered = this.get().filter((x) => x.id !== id);
      this.save(filtered);
    }
  }

  // ------------------------- CHECKOUT CONTROLLER -------------------------
  class CheckoutController {
    static init() {
      // cache elemen
      this.el = {
        cartContainer: document.getElementById("cartItems"),
        emptyState: document.getElementById("emptyCart"),
        formCustomer: document.getElementById("formCustomer"),
        summary: document.querySelector(".summaryCart"),
        subtotalVal: document.getElementById("subtotalValue"),
        deliveryVal: document.getElementById("deliveryValue"),
        totalVal: document.getElementById("totalValue"),
        promoInput: document.getElementById("kodepromo"),
        deliveryRadios: Array.from(
          document.querySelectorAll('input[name="delivery"]')
        ),
        addressInput: document.getElementById("alamatlengkap"),
        checkoutBtn: document.getElementById("checkoutButton"),
        noteFee: document.querySelector(".noteFee"),
        noteTotal: document.getElementById("noteTotal"),
        paymentRadios: Array.from(
          document.querySelectorAll('input[name="payment"]')
        ),
      };

      // bind events
      window.addEventListener("cartUpdated", () => {
        this.render();
        this.updateTotals();
      });
      document.addEventListener("DOMContentLoaded", () => {
        this.render();
        this.updateTotals();
        this.updatePaymentNote();
      });
      this.el.promoInput.addEventListener("input", () => this.updateTotals());
      this.el.deliveryRadios.forEach((r) =>
        r.addEventListener("change", () => {
          this.onDeliveryChange();
          this.updateTotals();
        })
      );
      this.el.paymentRadios.forEach((r) =>
        r.addEventListener("change", () => {
          this.updatePaymentNote(); // Add this line
        })
      );
      this.el.checkoutBtn?.addEventListener("click", (e) => {
        e.preventDefault();
        this.handleCheckout();
      });
    }

    static render() {
      const cart = CartManager.get();
      const isEmpty = cart.length === 0;
      // toggle UI
      this.el.emptyState.style.display = isEmpty ? "flex" : "none";
      this.el.cartContainer.style.display = isEmpty ? "none" : "flex";
      this.el.formCustomer?.style.setProperty(
        "display",
        isEmpty ? "none" : "flex"
      );
      this.el.summary?.style.setProperty("display", isEmpty ? "none" : "flex");
      if (isEmpty) return;

      // clear and render each
      this.el.cartContainer.innerHTML = "";
      cart.forEach((p) => {
        const card = document.createElement("div");
        card.className = "cardCart";
        card.id = p.id;
        card.innerHTML = `
          <div class="thumbnail" style="background-image:url('${p.image}')">
            <div class="price">${formatRupiah(Number(p.price))}</div>
          </div>
          <div class="content">
            <div class="data">
              <div class="title">${p.name}<span class="qty">x${p.quantity}</span></div>
            </div>
            <div class="action"><div class="spacer"></div></div>
          </div>
        `;
        const action = card.querySelector(".action");
        // buttons
        action.insertBefore(
          this.makeBtn("Kurangi", () => CartManager.dec(p.id)),
          action.firstChild
        );
        action.insertBefore(
          this.makeBtn(
            "Tambahin",
            () => CartManager.inc(p.id),
            p.quantity >= MAX_QTY
          ),
          action.firstChild
        );
        action.appendChild(this.makeBtn("Hapus", () => CartManager.del(p.id)));
        this.el.cartContainer.appendChild(card);
      });
    }

    static makeBtn(label, onClick, disabled = false) {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.className = `button link${disabled ? " disabled" : ""}`;
      btn.textContent = label;
      btn.disabled = disabled;
      btn.addEventListener("click", onClick);
      return btn;
    }

    static updatePaymentNote() {
      const paymentMethod = document.querySelector(
        'input[name="payment"]:checked'
      )?.value;

      if (paymentMethod === "transfer") {
        this.el.noteTotal.style.display = "block";
      } else {
        this.el.noteTotal.style.display = "none";
      }
    }

    static calculate() {
      const cart = CartManager.get();
      const subtotal = cart.reduce(
        (s, p) => s + Number(p.price) * p.quantity,
        0
      );
      const method = document.querySelector(
        'input[name="delivery"]:checked'
      )?.value;
      let fee = 0;

      if (method === "delivery") {
        fee = subtotal >= 60000 ? 5000 : 10000;
        // promo only on delivery fee
        const code = this.el.promoInput.value.toUpperCase();
        if (code in promoCodes) fee = Math.max(0, fee - promoCodes[code]);
        // show note only when subtotal>=60000
        this.el.noteFee.style.display = subtotal >= 60000 ? "block" : "none";
      } else {
        fee = 0;
        this.el.noteFee.style.display = "none";
      }
      return { subtotal, fee, total: subtotal + fee, method };
    }

    static updateTotals() {
      const { subtotal, fee, total, method } = this.calculate();
      this.el.subtotalVal.textContent = formatRupiah(subtotal);
      this.el.deliveryVal.textContent =
        method === "takeaway" ? "Gratis" : formatRupiah(fee);
      this.el.totalVal.textContent = formatRupiah(total);
    }

    static onDeliveryChange() {
      const method = document.querySelector(
        'input[name="delivery"]:checked'
      )?.value;
      if (method === "takeaway") {
        this.el.addressInput.value = "Ambil di toko";
        this.el.addressInput.disabled = true;
        // hide any existing error
        const err =
          this.el.addressInput.parentElement.querySelector(".errorText");
        if (err) err.style.display = "none";
      } else {
        this.el.addressInput.value = "";
        this.el.addressInput.disabled = false;
      }
    }

    static validate() {
      let ok = true;
      let firstField = null;

      // 1. Validasi Nama (min. 3 karakter)
      const nameInp = document.getElementById("namalengkap");
      const nameErr = nameInp.parentElement.querySelector(".errorText");
      if (nameInp.value.trim().length < 3) {
        nameErr.textContent = "Nama lengkap minimal 3 karakter";
        nameErr.style.display = "block";
        ok = false;
        firstField = firstField || nameInp;
      } else {
        nameErr.style.display = "none";
      }

      // 2. Validasi WA (min. 10 digit angka)
      const phoneInp = document.getElementById("nomorwa");
      const phoneErr = phoneInp.parentElement.querySelector(".errorText");
      const digits = phoneInp.value.replace(/\D/g, "");
      // if (digits.length < 10 || digits.length > 13) {
      //   phoneErr.textContent = "Nomor WA harus 10-13 digit";
      //   phoneErr.style.display = "block";
      //   ok = false;
      //   firstField = firstField || phoneInp;
      // } else {
      //   phoneErr.style.display = "none";
      // }

      if (
        digits.length < 10 ||
        !(digits.startsWith("62") || digits.startsWith("08"))
      ) {
        phoneErr.textContent =
          "Nomor WA harus diawali 62/08 dan minimal 10 digit";
        phoneErr.style.display = "block";
        ok = false;
        firstField = firstField || phoneInp;
      } else {
        phoneErr.style.display = "none";
      }

      // 3. Validasi Alamat hanya saat delivery
      const delivery = document.querySelector(
        'input[name="delivery"]:checked'
      )?.value;
      if (delivery === "delivery") {
        const addrInp = this.el.addressInput;
        const addrErr = addrInp.parentElement.querySelector(".errorText");
        if (addrInp.value.trim().length < 10) {
          addrErr.textContent = "Alamat harus lengkap minimal 10 karakter";
          addrErr.style.display = "block";
          ok = false;
          firstField = firstField || addrInp;
        } else {
          addrErr.style.display = "none";
        }
      }

      // 4. Keranjang tidak boleh kosong
      if (CartManager.get().length === 0) {
        alert("Keranjang masih kosong!");
        ok = false;
      }

      // Scroll & focus ke field pertama yang gagal
      if (!ok && firstField) {
        firstField.scrollIntoView({ behavior: "smooth", block: "center" });
        firstField.focus();
      }

      return ok;
    }

    static saveCustomer() {
      const name = window.getInputValue("namalengkap");
      const phone = window.getInputValue("nomorwa");
      const address = window.getInputValue("alamatlengkap");
      const pm =
        document.querySelector('input[name="payment"]:checked')?.value ||
        "transfer";
      const dm =
        document.querySelector('input[name="delivery"]:checked')?.value ||
        "delivery";
      const { subtotal, fee, total } = this.calculate();
      const ts = new Date().toISOString();
      const orderId = `${name.replace(/\s+/g, "").toUpperCase()}${Date.now()}`;

      const data = {
        name,
        phone,
        address,
        paymentMethod: pm,
        deliveryMethod: dm,
        timestamp: ts,
        orderId,
        subtotal,
        deliveryFee: fee,
        total,
      };
      localStorage.setItem("customerData", JSON.stringify(data));
      return data;
    }

    static async handleCheckout() {
      if (!this.validate()) return;

      const currentDomain = window.location.origin;
      const FLIP_REDIRECT_URL = `${currentDomain}/payment/tf`;
      console.log(FLIP_REDIRECT_URL);
      const cust = this.saveCustomer();

      if (cust.paymentMethod === "transfer") {
        try {
          const form = new URLSearchParams({
            title: `Pembayaran ${cust.orderId}`,
            type: "SINGLE",
            amount: cust.total,
            redirect_url: FLIP_REDIRECT_URL,
            is_address_required: "1",
            is_phone_number_required: "1",
            step: "2",
            sender_name: cust.name,
            sender_email: "customer@chechecakes.biz.id",
            sender_phone_number: cust.phone,
            sender_address: cust.address,
          });

          const resp = await fetch(
            "https://bigflip.id/big_sandbox_api/v2/pwf/bill",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                Accept: "application/json",
                Authorization: `Basic ${FLIP_API_KEY}`,
              },
              body: form,
            }
          );

          const result = await resp.json();
          console.log("Flip API:", result);

          // cari URL di berbagai kemungkinan
          const raw =
            result.link_url ??
            result.data?.link_url ??
            result.data?.payment?.link_url;
          const linkId =
            result.link_id ??
            result.data?.link_id ??
            result.data?.payment?.link_id;

          if (!raw || !linkId) {
            console.error("Flip response missing link_url or link_id:", result);
            alert("Gagal mendapatkan data pembayaran.");
            return;
          }

          const url = /^https?:\/\//i.test(raw) ? raw : `https://${raw}`;

          const flipData = { link_id: linkId, link_url: url };
          localStorage.setItem("flipResponse", JSON.stringify(flipData));
          // tambahan jika perlu
          localStorage.setItem("flipLinkId", linkId);
          localStorage.setItem("flipLinkUrl", url);

          window.location.href = url;
        } catch (err) {
          console.error(err);
          alert("Gagal memproses pembayaran. Silakan coba lagi.");
        }
      } else {
        window.location.href = "/payment/cod";
      }
    }
  }

  // ------------------------- BOOTSTRAP -------------------------
  CheckoutController.init();
</script>

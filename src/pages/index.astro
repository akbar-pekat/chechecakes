---
import Layout from "../layouts/layout.astro";
import Button from "../components/button.astro";
import ProductCard from "../components/productCard.astro";

import { products } from "../data/products.js";
import "../styles/index.css";

const categories = [
  "Semua",
  ...new Set(products.filter((p) => p.variants).map((p) => p.name)),
];
---

<Layout>
  <div
    data-title="Hai, selamat datang di Cheche Cakes!"
    data-intro="Yuk tur bentar biar tau cara pesannya~ atau langsung lewatin aja. Centang dibawah biar gak muncul lagi nanti."
  >
  </div>
  <div
    class="categorySection"
    data-title="Lihat-lihat kuenya per kategori~"
    data-intro="Di sini kamu bisa pilih produk berdasarkan kategori, jadi gak perlu capek-capek scroll. ✨"
  >
    {
      categories.map((category) => (
        <div class="tabItem" data-category={category}>
          <div class="container">{category}</div>
        </div>
      ))
    }
  </div>

  <div
    class="productList"
    data-title="Daftar kuenya nih~"
    data-intro="Kalau ada yang kamu suka, tinggal klik tombol Mau yang ini atau Mau lagi buat masukin ke keranjang 🍰"
  >
    {
      products.map((product) =>
        product.variants ? (
          product.variants.map((variant) => (
            <div class="itemCard" data-category={product.name}>
              <ProductCard product={variant} />
            </div>
          ))
        ) : (
          <div class="itemCard" data-category="Semua">
            <ProductCard product={product} />
          </div>
        )
      )
    }
  </div>

  <div
    class="footerCart"
    data-title="Ini keranjang kamu~"
    data-intro="Di sini kamu bisa cek udah berapa menu yang kamu pilih, tinggal lanjut aja kalau udah pas!"
  >
    <div class="container">
      <div class="textContent">
        <div class="label">Keranjang saya</div>
        <div class="value" id="valueCart">2 menu</div>
      </div>
      <Button style="outline" href="/checkout">Lihat keranjang</Button>
    </div>
  </div>
</Layout>

<script>
  // ------------------------- CART FUNCTIONALITY -------------------------

  // Get the cart from localStorage
  const getCart = () => {
    const cart = localStorage.getItem("cart");
    const lastSavedTime = localStorage.getItem("cartTimestamp");
    const currentTime = new Date().getTime();

    // Jika ada timestamp dan selisihnya lebih dari 24 jam (dalam milidetik)
    if (
      lastSavedTime &&
      currentTime - parseInt(lastSavedTime) > 24 * 60 * 60 * 1000
    ) {
      // Hapus keranjang, timestamp, dan data customer
      localStorage.removeItem("cart");
      localStorage.removeItem("cartTimestamp");
      localStorage.removeItem("customerData");
      return [];
    }

    return cart ? JSON.parse(cart) : [];
  };

  // Save the cart back to localStorage
  const saveCart = (
    cart: {
      id: string;
      name: string | null;
      price: string | null;
      image: string | null;
      quantity: number;
    }[]
  ) => {
    localStorage.setItem("cart", JSON.stringify(cart));
    // Simpan timestamp saat ini
    localStorage.setItem("cartTimestamp", new Date().getTime().toString());
  };

  // Add product to the cart (or update quantity if already in cart)
  const addToCart = (
    id: string,
    name: string,
    price: string,
    image: string
  ) => {
    const cart = getCart();
    const existingProductIndex = cart.findIndex(
      (product: { id: string }) => product.id === id
    );

    if (existingProductIndex !== -1) {
      // If the product exists, increment the quantity (max 20)
      const existingProduct = cart[existingProductIndex];
      if (existingProduct.quantity < 20) {
        existingProduct.quantity = Math.min(existingProduct.quantity + 1, 20);
      }
    } else {
      // If the product doesn't exist in cart, add a new item
      cart.push({
        id,
        name,
        price,
        image,
        quantity: 1,
      });
    }

    // Save the updated cart to localStorage
    saveCart(cart);
  };

  // Update the cart badge to reflect the total quantity of items in the cart
  const updateCartBadge = () => {
    const cart = getCart();
    const totalQuantity = cart.reduce(
      (total: number, product: { quantity: number }) =>
        total + product.quantity,
      0
    );

    const cartBadge = document.querySelector("#valueCart");

    if (cartBadge) {
      cartBadge.textContent =
        totalQuantity > 0 ? `${totalQuantity} menu` : "0 menu";
      (cartBadge as HTMLElement).style.display = "block";
    }
  };

  // Update button disabled state based on cart quantity
  const updateButtonStates = () => {
    const cart = getCart();
    const buttons = document.querySelectorAll("button[data-id]");

    buttons.forEach((button) => {
      const id = button.getAttribute("data-id");
      const cartItem = cart.find((item: { id: string }) => item.id === id);

      if (cartItem && cartItem.quantity >= 20) {
        button.classList.add("disabled");
        button.textContent = "Maksimal 20 item";
      } else if (cartItem && cartItem.quantity > 0) {
        button.classList.remove("disabled");
        button.textContent = "Mau lagi";
      } else {
        button.classList.remove("disabled");
        button.textContent = "Mau yang ini";
      }
    });
  };

  // Add event listeners for all buttons to add products to the cart
  const buttons = document.querySelectorAll("button[data-id]");
  buttons.forEach((button) => {
    button.addEventListener("click", function (this: HTMLButtonElement) {
      const id = this.getAttribute("data-id");
      const name = this.getAttribute("data-name");
      const price = this.getAttribute("data-price");
      const image = this.getAttribute("data-image");

      if (id && name && price && image) {
        addToCart(id, name, price, image); // Add to cart
        updateCartBadge(); // Update the badge
        updateButtonStates(); // Update button states
      }
    });
  });

  // ------------------------- CATEGORY FILTERING -------------------------

  // Function to filter and display items based on selected category
  const filterItemsByCategory = (selectedCategory: string) => {
    const itemCards = document.querySelectorAll(".itemCard");

    itemCards.forEach((card) => {
      const cardCategory = card.getAttribute("data-category");

      // Show all items if "Semua" category is selected
      const displayStyle =
        selectedCategory === "Semua" || cardCategory === selectedCategory
          ? "block"
          : "none";
      (card as HTMLElement).style.display = displayStyle;
    });
  };
  // Function to handle tab item clicks and apply active class
  const handleTabClick = (tab: HTMLElement) => {
    // Remove active class from all tabs
    document
      .querySelectorAll(".tabItem .container")
      .forEach((container) => container.classList.remove("active"));

    // Add active class to the clicked tab
    const container = tab.querySelector(".container");
    container?.classList.add("active");

    // Get the selected category and filter the items
    const selectedCategory = tab.getAttribute("data-category");
    if (selectedCategory) {
      filterItemsByCategory(selectedCategory);
    }
  };

  // ------------------------- INITIAL SETUP -------------------------

  // Initialize: Set active class for "Semua" tab
  const semuaTabContainer = document.querySelector(
    '.tabItem[data-category="Semua"] .container'
  );
  semuaTabContainer?.classList.add("active");

  // Initially display all item cards
  filterItemsByCategory("Semua");

  // Add event listeners for tab clicks
  const tabItems = document.querySelectorAll(".tabItem");
  tabItems.forEach((tab) => {
    tab.addEventListener("click", () => handleTabClick(tab as HTMLElement));
  });

  // Call updateButtonStates when the page is loaded
  document.addEventListener("DOMContentLoaded", () => {
    updateCartBadge();
    updateButtonStates();
  });

  // Import dan inisialisasi intro.js
  import introJs from "intro.js";
  import "intro.js/minified/introjs.min.css";

  introJs()
    .setOptions({
      prevLabel: "Kembali",
      nextLabel: "Lanjut",
      doneLabel: "Oke, paham",
      dontShowAgain: true,
      dontShowAgainLabel: "Jangan tampilkan lagi",
    })
    .start();
</script>

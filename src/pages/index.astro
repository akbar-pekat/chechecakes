---
import Layout from "../layouts/layout.astro";
import Button from "../components/button.astro";
import ProductCard from "../components/productCard.astro";

import { products } from "../data/products.js";
import "../styles/index.css";

const categories = [
  "Semua",
  ...new Set(products.filter((p) => p.variants).map((p) => p.name)),
];
---

<Layout>
  <div class="categorySection">
    {
      categories.map((category) => (
        <div class="tabItem" data-category={category}>
          <div class="container">{category}</div>
        </div>
      ))
    }
  </div>

  <div class="productList">
    {
      products.map((product) =>
        product.variants ? (
          product.variants.map((variant) => (
            <div class="itemCard" data-category={product.name}>
              <ProductCard product={variant} />
            </div>
          ))
        ) : (
          <div class="itemCard" data-category="Semua">
            <ProductCard product={product} />
          </div>
        )
      )
    }
  </div>

  <div class="footerCart">
    <div class="container">
      <div class="textContent">
        <div class="label">Keranjang saya</div>
        <div class="value" id="valueCart">menu</div>
      </div>
      <Button style="outline" href="/checkout">Lihat keranjang</Button>
    </div>
  </div>
</Layout>

<script type="module">
  // ------------------------- CART MANAGER -------------------------
  class CartManager {
    static CART_KEY = "cart";
    static TS_KEY = "cartTimestamp";
    static CUST_KEY = "customerData";
    static EXPIRY_MS = 24 * 60 * 60 * 1000;

    static getCart() {
      const ts = localStorage.getItem(this.TS_KEY);
      if (ts && Date.now() - Number(ts) > this.EXPIRY_MS) {
        this.clear();
        return [];
      }
      try {
        return JSON.parse(localStorage.getItem(this.CART_KEY) || "[]");
      } catch {
        console.warn("Invalid cart data, resetting.");
        this.clear();
        return [];
      }
    }

    static saveCart(cart) {
      localStorage.setItem(this.CART_KEY, JSON.stringify(cart));
      localStorage.setItem(this.TS_KEY, Date.now().toString());
    }

    static clear() {
      [this.CART_KEY, this.TS_KEY, this.CUST_KEY].forEach((k) =>
        localStorage.removeItem(k)
      );
    }

    static addItem({ id, name, price, image }) {
      const cart = this.getCart();
      const item = cart.find((p) => p.id === id);
      if (item) {
        item.quantity = Math.min(item.quantity + 1, 20);
      } else {
        cart.push({ id, name, price, image, quantity: 1 });
      }
      this.saveCart(cart);
      return cart;
    }

    static totalQuantity() {
      return this.getCart().reduce((sum, { quantity }) => sum + quantity, 0);
    }
  }

  // ------------------------- SELECTORS -------------------------
  const SEL = {
    badge: "#valueCart",
    addBtn: "button[data-id]",
    tabItem: ".tabItem",
    itemCard: ".itemCard",
    semuaTab: '.tabItem[data-category="Semua"] .container',
  };

  // ------------------------- UI UPDATES -------------------------
  function updateCartBadge() {
    const badge = document.querySelector(SEL.badge);
    if (!badge) return;
    const total = CartManager.totalQuantity();
    badge.textContent = total ? `${total} menu` : "0 menu";
    badge.style.display = "block";
  }

  function updateButtonStates() {
    CartManager.getCart();
    document.querySelectorAll(SEL.addBtn).forEach((btn) => {
      const id = btn.dataset.id;
      const item = CartManager.getCart().find((i) => i.id === id);
      if (item?.quantity >= 20) {
        btn.classList.add("disabled");
        btn.textContent = "Maksimal 20 item";
      } else if (item) {
        btn.classList.remove("disabled");
        btn.textContent = "Mau lagi";
      } else {
        btn.classList.remove("disabled");
        btn.textContent = "Mau yang ini";
      }
    });
  }

  // ------------------------- EVENT BINDERS -------------------------
  function bindAddButtons() {
    document.querySelectorAll(SEL.addBtn).forEach((btn) => {
      btn.addEventListener("click", () => {
        if (btn.classList.contains("disabled")) return;
        const { id, name, price, image } = btn.dataset;
        if (id && name && price && image) {
          CartManager.addItem({ id, name, price, image });
          updateCartBadge();
          updateButtonStates();
        }
      });
    });
  }

  function filterItems(category) {
    document.querySelectorAll(SEL.itemCard).forEach((card) => {
      const show = category === "Semua" || card.dataset.category === category;
      card.style.display = show ? "block" : "none";
    });
  }

  function bindTabs() {
    document.querySelectorAll(SEL.tabItem).forEach((tab) => {
      tab.addEventListener("click", () => {
        document
          .querySelectorAll(".tabItem .container")
          .forEach((c) => c.classList.remove("active"));
        tab.querySelector(".container")?.classList.add("active");
        filterItems(tab.dataset.category || "Semua");
      });
    });
  }


  // ------------------------- INITIALIZATION -------------------------
  document.addEventListener("DOMContentLoaded", () => {
    updateCartBadge();
    updateButtonStates();
    bindAddButtons();

    document.querySelector(SEL.semuaTab)?.classList.add("active");
    filterItems("Semua");
    bindTabs();
  });
</script>
